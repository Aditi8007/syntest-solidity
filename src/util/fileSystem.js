"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTestFilePaths = exports.save = exports.tearDownTempFolders = exports.setupTempFolders = void 0;
const fs_1 = require("fs");
const path = require("path");
const syntest_framework_1 = require("syntest-framework");
const { outputFileSync } = require("fs-extra");
const globby = require("globby");
const recursive = require("recursive-readdir");
function setupTempFolders(tempContractsDir, tempArtifactsDir) {
    return __awaiter(this, void 0, void 0, function* () {
        if (fs_1.existsSync(tempContractsDir)) {
            yield fs_1.rmdirSync(tempContractsDir, { recursive: true });
        }
        if (fs_1.existsSync(tempArtifactsDir)) {
            yield fs_1.rmdirSync(tempArtifactsDir, { recursive: true });
        }
        yield fs_1.mkdirSync(tempContractsDir, {
            recursive: true,
        });
        yield fs_1.mkdirSync(tempArtifactsDir, {
            recursive: true,
        });
    });
}
exports.setupTempFolders = setupTempFolders;
function tearDownTempFolders(tempContractsDir, tempArtifactsDir) {
    return __awaiter(this, void 0, void 0, function* () {
        yield fs_1.rmdirSync(tempContractsDir, { recursive: true });
        yield fs_1.rmdirSync(tempArtifactsDir, { recursive: true });
    });
}
exports.tearDownTempFolders = tearDownTempFolders;
/**
 * Save a set of instrumented files to a temporary directory.
 * @param  {Object[]} targets   array of targets generated by `assembleTargets`
 * @param  {[type]} originalDir absolute path to original contracts directory
 * @param  {[type]} tempDir     absolute path to temp contracts directory
 */
function save(targets, originalDir, tempDir) {
    let _path;
    for (const target of targets) {
        _path = path.normalize(target.canonicalPath).replace(originalDir, tempDir);
        outputFileSync(_path, target.source);
    }
}
exports.save = save;
/**
 * Returns a list of test files to pass to mocha.
 * @param  {Object}   config  truffleConfig
 * @return {String[]}         list of files to pass to mocha
 */
function getTestFilePaths(config) {
    return __awaiter(this, void 0, void 0, function* () {
        let target;
        // Handle --file <path|glob> cli option (subset of tests)
        typeof config.file === "string"
            ? (target = globby.sync([config.file]))
            : (target = yield recursive(config.testDir));
        // Filter native solidity tests and warn that they're skipped
        const solregex = /.*\.(sol)$/;
        const hasSols = target.filter((f) => f.match(solregex) != null);
        if (hasSols.length > 0)
            syntest_framework_1.getLogger().info("sol-tests " + [hasSols.length]);
        // Return list of test files
        const testregex = /.*\.(js|ts|es|es6|jsx)$/;
        return target.filter((f) => f.match(testregex) != null);
    });
}
exports.getTestFilePaths = getTestFilePaths;
//# sourceMappingURL=fileSystem.js.map